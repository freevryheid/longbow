#[

Longbow v1.0.1
A warband chess variant
Copyright 2019 Andre Smit
MIT license

See the readme for game rules and credits.

Bitboards, position and move arrays are setup with the board as follows:

63 62 61 60 59 58 57 56 \
55 54 53 52 51 50 49 48 \
47 46 45 44 43 42 41 40 \
39 38 37 36 35 34 33 32 \
31 30 29 28 27 26 25 24 \
23 22 21 20 19 18 17 16 \
15 14 13 12 11 10 09 08 \
07 06 05 04 03 02 01 00 \

]#

import
  strutils
  , cligen
  , turn_based_game
  , negamax

type
  Longbow* = ref object of Game
    piece_char*: array[4, char]
    color*: array[64, int]
    piece*: array[64, int]
    pos*: int64
    whites*: int64
    blacks*: int64
    pawns*: int64
    knights*: int64
    bishops*: int64
    white_pawns*: int64
    white_knights*: int64
    white_bishops*: int64
    black_pawns*: int64
    black_knights*: int64
    black_bishops*: int64

const
  NONE* = 0
  WHITE* = 1
  BLACK* = 2
  EMPTY* = 0
  PAWN* = 1
  KNIGHT* = 2
  BISHOP* = 3

template ROW*(x: untyped): untyped =
  (x shr 3)

template COL*(x: untyped): untyped =
  7 - (x and 7)

let
  piece_char* = ['.', 'P', 'N', 'B']
  init_color* = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2]
  init_piece* = [
    3, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3]
  one* =
    0b0000000000000000000000000000000000000000000000000000000000000001'i64
  rank1* =
    0b0000000000000000000000000000000000000000000000000000000011111111'i64
  rank8* =
    0b1111111100000000000000000000000000000000000000000000000000000000'i64
  init_pos* =
    0b1111111111111111111111110000000000000000111111111111111111111111'i64
  init_black* =
    0b1111111111111111111111110000000000000000000000000000000000000000'i64
  init_white* =
    0b0000000000000000000000000000000000000000111111111111111111111111'i64
  init_pawn* =
    0b0000000000000000111111110000000000000000111111110000000000000000'i64
  init_knight* =
    0b0000000011111111000000000000000000000000000000001111111100000000'i64
  init_bishop* =
    0b1111111100000000000000000000000000000000000000000000000011111111'i64
  wpm* = [  # white pawn moves
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000001000000000000000000000000'i64,
    0b0000000000000000000000000000000000000010000000000000000000000000'i64,
    0b0000000000000000000000000000000000000100000000000000000000000000'i64,
    0b0000000000000000000000000000000000001000000000000000000000000000'i64,
    0b0000000000000000000000000000000000010000000000000000000000000000'i64,
    0b0000000000000000000000000000000000100000000000000000000000000000'i64,
    0b0000000000000000000000000000000001000000000000000000000000000000'i64,
    0b0000000000000000000000000000000010000000000000000000000000000000'i64,
    0b0000000000000000000000000000000100000000000000000000000000000000'i64,
    0b0000000000000000000000000000001000000000000000000000000000000000'i64,
    0b0000000000000000000000000000010000000000000000000000000000000000'i64,
    0b0000000000000000000000000000100000000000000000000000000000000000'i64,
    0b0000000000000000000000000001000000000000000000000000000000000000'i64,
    0b0000000000000000000000000010000000000000000000000000000000000000'i64,
    0b0000000000000000000000000100000000000000000000000000000000000000'i64,
    0b0000000000000000000000001000000000000000000000000000000000000000'i64,
    0b0000000000000000000000010000000000000000000000000000000000000000'i64,
    0b0000000000000000000000100000000000000000000000000000000000000000'i64,
    0b0000000000000000000001000000000000000000000000000000000000000000'i64,
    0b0000000000000000000010000000000000000000000000000000000000000000'i64,
    0b0000000000000000000100000000000000000000000000000000000000000000'i64,
    0b0000000000000000001000000000000000000000000000000000000000000000'i64,
    0b0000000000000000010000000000000000000000000000000000000000000000'i64,
    0b0000000000000000100000000000000000000000000000000000000000000000'i64,
    0b0000000000000001000000000000000000000000000000000000000000000000'i64,
    0b0000000000000010000000000000000000000000000000000000000000000000'i64,
    0b0000000000000100000000000000000000000000000000000000000000000000'i64,
    0b0000000000001000000000000000000000000000000000000000000000000000'i64,
    0b0000000000010000000000000000000000000000000000000000000000000000'i64,
    0b0000000000100000000000000000000000000000000000000000000000000000'i64,
    0b0000000001000000000000000000000000000000000000000000000000000000'i64,
    0b0000000010000000000000000000000000000000000000000000000000000000'i64,
    0b0000000100000000000000000000000000000000000000000000000000000000'i64,
    0b0000001000000000000000000000000000000000000000000000000000000000'i64,
    0b0000010000000000000000000000000000000000000000000000000000000000'i64,
    0b0000100000000000000000000000000000000000000000000000000000000000'i64,
    0b0001000000000000000000000000000000000000000000000000000000000000'i64,
    0b0010000000000000000000000000000000000000000000000000000000000000'i64,
    0b0100000000000000000000000000000000000000000000000000000000000000'i64,
    0b1000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64]
  bpm* = [
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000001'i64,
    0b0000000000000000000000000000000000000000000000000000000000000010'i64,
    0b0000000000000000000000000000000000000000000000000000000000000100'i64,
    0b0000000000000000000000000000000000000000000000000000000000001000'i64,
    0b0000000000000000000000000000000000000000000000000000000000010000'i64,
    0b0000000000000000000000000000000000000000000000000000000000100000'i64,
    0b0000000000000000000000000000000000000000000000000000000001000000'i64,
    0b0000000000000000000000000000000000000000000000000000000010000000'i64,
    0b0000000000000000000000000000000000000000000000000000000100000000'i64,
    0b0000000000000000000000000000000000000000000000000000001000000000'i64,
    0b0000000000000000000000000000000000000000000000000000010000000000'i64,
    0b0000000000000000000000000000000000000000000000000000100000000000'i64,
    0b0000000000000000000000000000000000000000000000000001000000000000'i64,
    0b0000000000000000000000000000000000000000000000000010000000000000'i64,
    0b0000000000000000000000000000000000000000000000000100000000000000'i64,
    0b0000000000000000000000000000000000000000000000001000000000000000'i64,
    0b0000000000000000000000000000000000000000000000010000000000000000'i64,
    0b0000000000000000000000000000000000000000000000100000000000000000'i64,
    0b0000000000000000000000000000000000000000000001000000000000000000'i64,
    0b0000000000000000000000000000000000000000000010000000000000000000'i64,
    0b0000000000000000000000000000000000000000000100000000000000000000'i64,
    0b0000000000000000000000000000000000000000001000000000000000000000'i64,
    0b0000000000000000000000000000000000000000010000000000000000000000'i64,
    0b0000000000000000000000000000000000000000100000000000000000000000'i64,
    0b0000000000000000000000000000000000000001000000000000000000000000'i64,
    0b0000000000000000000000000000000000000010000000000000000000000000'i64,
    0b0000000000000000000000000000000000000100000000000000000000000000'i64,
    0b0000000000000000000000000000000000001000000000000000000000000000'i64,
    0b0000000000000000000000000000000000010000000000000000000000000000'i64,
    0b0000000000000000000000000000000000100000000000000000000000000000'i64,
    0b0000000000000000000000000000000001000000000000000000000000000000'i64,
    0b0000000000000000000000000000000010000000000000000000000000000000'i64,
    0b0000000000000000000000000000000100000000000000000000000000000000'i64,
    0b0000000000000000000000000000001000000000000000000000000000000000'i64,
    0b0000000000000000000000000000010000000000000000000000000000000000'i64,
    0b0000000000000000000000000000100000000000000000000000000000000000'i64,
    0b0000000000000000000000000001000000000000000000000000000000000000'i64,
    0b0000000000000000000000000010000000000000000000000000000000000000'i64,
    0b0000000000000000000000000100000000000000000000000000000000000000'i64,
    0b0000000000000000000000001000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64]
  wpc* = [  # white pawn captures
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000010000000000000000000000000'i64,
    0b0000000000000000000000000000000000000101000000000000000000000000'i64,
    0b0000000000000000000000000000000000001010000000000000000000000000'i64,
    0b0000000000000000000000000000000000010100000000000000000000000000'i64,
    0b0000000000000000000000000000000000101000000000000000000000000000'i64,
    0b0000000000000000000000000000000001010000000000000000000000000000'i64,
    0b0000000000000000000000000000000010100000000000000000000000000000'i64,
    0b0000000000000000000000000000000001000000000000000000000000000000'i64,
    0b0000000000000000000000000000001000000000000000000000000000000000'i64,
    0b0000000000000000000000000000010100000000000000000000000000000000'i64,
    0b0000000000000000000000000000101000000000000000000000000000000000'i64,
    0b0000000000000000000000000001010000000000000000000000000000000000'i64,
    0b0000000000000000000000000010100000000000000000000000000000000000'i64,
    0b0000000000000000000000000101000000000000000000000000000000000000'i64,
    0b0000000000000000000000001010000000000000000000000000000000000000'i64,
    0b0000000000000000000000000100000000000000000000000000000000000000'i64,
    0b0000000000000000000000100000000000000000000000000000000000000000'i64,
    0b0000000000000000000001010000000000000000000000000000000000000000'i64,
    0b0000000000000000000010100000000000000000000000000000000000000000'i64,
    0b0000000000000000000101000000000000000000000000000000000000000000'i64,
    0b0000000000000000001010000000000000000000000000000000000000000000'i64,
    0b0000000000000000010100000000000000000000000000000000000000000000'i64,
    0b0000000000000000101000000000000000000000000000000000000000000000'i64,
    0b0000000000000000010000000000000000000000000000000000000000000000'i64,
    0b0000000000000010000000000000000000000000000000000000000000000000'i64,
    0b0000000000000101000000000000000000000000000000000000000000000000'i64,
    0b0000000000001010000000000000000000000000000000000000000000000000'i64,
    0b0000000000010100000000000000000000000000000000000000000000000000'i64,
    0b0000000000101000000000000000000000000000000000000000000000000000'i64,
    0b0000000001010000000000000000000000000000000000000000000000000000'i64,
    0b0000000010100000000000000000000000000000000000000000000000000000'i64,
    0b0000000001000000000000000000000000000000000000000000000000000000'i64,
    0b0000001000000000000000000000000000000000000000000000000000000000'i64,
    0b0000010100000000000000000000000000000000000000000000000000000000'i64,
    0b0000101000000000000000000000000000000000000000000000000000000000'i64,
    0b0001010000000000000000000000000000000000000000000000000000000000'i64,
    0b0010100000000000000000000000000000000000000000000000000000000000'i64,
    0b0101000000000000000000000000000000000000000000000000000000000000'i64,
    0b1010000000000000000000000000000000000000000000000000000000000000'i64,
    0b0100000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64]
  bpc* = [
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000010'i64,
    0b0000000000000000000000000000000000000000000000000000000000000101'i64,
    0b0000000000000000000000000000000000000000000000000000000000001010'i64,
    0b0000000000000000000000000000000000000000000000000000000000010100'i64,
    0b0000000000000000000000000000000000000000000000000000000000101000'i64,
    0b0000000000000000000000000000000000000000000000000000000001010000'i64,
    0b0000000000000000000000000000000000000000000000000000000010100000'i64,
    0b0000000000000000000000000000000000000000000000000000000001000000'i64,
    0b0000000000000000000000000000000000000000000000000000001000000000'i64,
    0b0000000000000000000000000000000000000000000000000000010100000000'i64,
    0b0000000000000000000000000000000000000000000000000000101000000000'i64,
    0b0000000000000000000000000000000000000000000000000001010000000000'i64,
    0b0000000000000000000000000000000000000000000000000010100000000000'i64,
    0b0000000000000000000000000000000000000000000000000101000000000000'i64,
    0b0000000000000000000000000000000000000000000000001010000000000000'i64,
    0b0000000000000000000000000000000000000000000000000100000000000000'i64,
    0b0000000000000000000000000000000000000000000000100000000000000000'i64,
    0b0000000000000000000000000000000000000000000001010000000000000000'i64,
    0b0000000000000000000000000000000000000000000010100000000000000000'i64,
    0b0000000000000000000000000000000000000000000101000000000000000000'i64,
    0b0000000000000000000000000000000000000000001010000000000000000000'i64,
    0b0000000000000000000000000000000000000000010100000000000000000000'i64,
    0b0000000000000000000000000000000000000000101000000000000000000000'i64,
    0b0000000000000000000000000000000000000000010000000000000000000000'i64,
    0b0000000000000000000000000000000000000010000000000000000000000000'i64,
    0b0000000000000000000000000000000000000101000000000000000000000000'i64,
    0b0000000000000000000000000000000000001010000000000000000000000000'i64,
    0b0000000000000000000000000000000000010100000000000000000000000000'i64,
    0b0000000000000000000000000000000000101000000000000000000000000000'i64,
    0b0000000000000000000000000000000001010000000000000000000000000000'i64,
    0b0000000000000000000000000000000010100000000000000000000000000000'i64,
    0b0000000000000000000000000000000001000000000000000000000000000000'i64,
    0b0000000000000000000000000000001000000000000000000000000000000000'i64,
    0b0000000000000000000000000000010100000000000000000000000000000000'i64,
    0b0000000000000000000000000000101000000000000000000000000000000000'i64,
    0b0000000000000000000000000001010000000000000000000000000000000000'i64,
    0b0000000000000000000000000010100000000000000000000000000000000000'i64,
    0b0000000000000000000000000101000000000000000000000000000000000000'i64,
    0b0000000000000000000000001010000000000000000000000000000000000000'i64,
    0b0000000000000000000000000100000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64,
    0b0000000000000000000000000000000000000000000000000000000000000000'i64]
  kmc* = [  # knight moves and captures
    0b0000000000000000000000000000000000000000000000100000010000000000'i64,
    0b0000000000000000000000000000000000000000000001010000100000000000'i64,
    0b0000000000000000000000000000000000000000000010100001000100000000'i64,
    0b0000000000000000000000000000000000000000000101000010001000000000'i64,
    0b0000000000000000000000000000000000000000001010000100010000000000'i64,
    0b0000000000000000000000000000000000000000010100001000100000000000'i64,
    0b0000000000000000000000000000000000000000101000000001000000000000'i64,
    0b0000000000000000000000000000000000000000010000000010000000000000'i64,
    0b0000000000000000000000000000000000000010000001000000000000000100'i64,
    0b0000000000000000000000000000000000000101000010000000000000001000'i64,
    0b0000000000000000000000000000000000001010000100010000000000010001'i64,
    0b0000000000000000000000000000000000010100001000100000000000100010'i64,
    0b0000000000000000000000000000000000101000010001000000000001000100'i64,
    0b0000000000000000000000000000000001010000100010000000000010001000'i64,
    0b0000000000000000000000000000000010100000000100000000000000010000'i64,
    0b0000000000000000000000000000000001000000001000000000000000100000'i64,
    0b0000000000000000000000000000001000000100000000000000010000000010'i64,
    0b0000000000000000000000000000010100001000000000000000100000000101'i64,
    0b0000000000000000000000000000101000010001000000000001000100001010'i64,
    0b0000000000000000000000000001010000100010000000000010001000010100'i64,
    0b0000000000000000000000000010100001000100000000000100010000101000'i64,
    0b0000000000000000000000000101000010001000000000001000100001010000'i64,
    0b0000000000000000000000001010000000010000000000000001000010100000'i64,
    0b0000000000000000000000000100000000100000000000000010000001000000'i64,
    0b0000000000000000000000100000010000000000000001000000001000000000'i64,
    0b0000000000000000000001010000100000000000000010000000010100000000'i64,
    0b0000000000000000000010100001000100000000000100010000101000000000'i64,
    0b0000000000000000000101000010001000000000001000100001010000000000'i64,
    0b0000000000000000001010000100010000000000010001000010100000000000'i64,
    0b0000000000000000010100001000100000000000100010000101000000000000'i64,
    0b0000000000000000101000000001000000000000000100001010000000000000'i64,
    0b0000000000000000010000000010000000000000001000000100000000000000'i64,
    0b0000000000000010000001000000000000000100000000100000000000000000'i64,
    0b0000000000000101000010000000000000001000000001010000000000000000'i64,
    0b0000000000001010000100010000000000010001000010100000000000000000'i64,
    0b0000000000010100001000100000000000100010000101000000000000000000'i64,
    0b0000000000101000010001000000000001000100001010000000000000000000'i64,
    0b0000000001010000100010000000000010001000010100000000000000000000'i64,
    0b0000000010100000000100000000000000010000101000000000000000000000'i64,
    0b0000000001000000001000000000000000100000010000000000000000000000'i64,
    0b0000001000000100000000000000010000000010000000000000000000000000'i64,
    0b0000010100001000000000000000100000000101000000000000000000000000'i64,
    0b0000101000010001000000000001000100001010000000000000000000000000'i64,
    0b0001010000100010000000000010001000010100000000000000000000000000'i64,
    0b0010100001000100000000000100010000101000000000000000000000000000'i64,
    0b0101000010001000000000001000100001010000000000000000000000000000'i64,
    0b1010000000010000000000000001000010100000000000000000000000000000'i64,
    0b0100000000100000000000000010000001000000000000000000000000000000'i64,
    0b0000010000000000000001000000001000000000000000000000000000000000'i64,
    0b0000100000000000000010000000010100000000000000000000000000000000'i64,
    0b0001000100000000000100010000101000000000000000000000000000000000'i64,
    0b0010001000000000001000100001010000000000000000000000000000000000'i64,
    0b0100010000000000010001000010100000000000000000000000000000000000'i64,
    0b1000100000000000100010000101000000000000000000000000000000000000'i64,
    0b0001000000000000000100001010000000000000000000000000000000000000'i64,
    0b0010000000000000001000000100000000000000000000000000000000000000'i64,
    0b0000000000000100000000100000000000000000000000000000000000000000'i64,
    0b0000000000001000000001010000000000000000000000000000000000000000'i64,
    0b0000000000010001000010100000000000000000000000000000000000000000'i64,
    0b0000000000100010000101000000000000000000000000000000000000000000'i64,
    0b0000000001000100001010000000000000000000000000000000000000000000'i64,
    0b0000000010001000010100000000000000000000000000000000000000000000'i64,
    0b0000000000010000101000000000000000000000000000000000000000000000'i64,
    0b0000000000100000010000000000000000000000000000000000000000000000'i64]
  bmc* = [
    0b1000000001000000001000000001000000001000000001000000001000000000'i64,
    0b0000000010000000010000000010000000010000000010000000010100000000'i64,
    0b0000000000000000100000000100000000100000000100010000101000000000'i64,
    0b0000000000000000000000001000000001000001001000100001010000000000'i64,
    0b0000000000000000000000000000000110000010010001000010100000000000'i64,
    0b0000000000000000000000010000001000000100100010000101000000000000'i64,
    0b0000000000000001000000100000010000001000000100001010000000000000'i64,
    0b0000000100000010000001000000100000010000001000000100000000000000'i64,
    0b0100000000100000000100000000100000000100000000100000000000000010'i64,
    0b1000000001000000001000000001000000001000000001010000000000000101'i64,
    0b0000000010000000010000000010000000010001000010100000000000001010'i64,
    0b0000000000000000100000000100000100100010000101000000000000010100'i64,
    0b0000000000000000000000011000001001000100001010000000000000101000'i64,
    0b0000000000000001000000100000010010001000010100000000000001010000'i64,
    0b0000000100000010000001000000100000010000101000000000000010100000'i64,
    0b0000001000000100000010000001000000100000010000000000000001000000'i64,
    0b0010000000010000000010000000010000000010000000000000001000000100'i64,
    0b0100000000100000000100000000100000000101000000000000010100001000'i64,
    0b1000000001000000001000000001000100001010000000000000101000010001'i64,
    0b0000000010000000010000010010001000010100000000000001010000100010'i64,
    0b0000000000000001100000100100010000101000000000000010100001000100'i64,
    0b0000000100000010000001001000100001010000000000000101000010001000'i64,
    0b0000001000000100000010000001000010100000000000001010000000010000'i64,
    0b0000010000001000000100000010000001000000000000000100000000100000'i64,
    0b0001000000001000000001000000001000000000000000100000010000001000'i64,
    0b0010000000010000000010000000010100000000000001010000100000010000'i64,
    0b0100000000100000000100010000101000000000000010100001000100100000'i64,
    0b1000000001000001001000100001010000000000000101000010001001000001'i64,
    0b0000000110000010010001000010100000000000001010000100010010000010'i64,
    0b0000001000000100100010000101000000000000010100001000100000000100'i64,
    0b0000010000001000000100001010000000000000101000000001000000001000'i64,
    0b0000100000010000001000000100000000000000010000000010000000010000'i64,
    0b0000100000000100000000100000000000000010000001000000100000010000'i64,
    0b0001000000001000000001010000000000000101000010000001000000100000'i64,
    0b0010000000010001000010100000000000001010000100010010000001000000'i64,
    0b0100000100100010000101000000000000010100001000100100000110000000'i64,
    0b1000001001000100001010000000000000101000010001001000001000000001'i64,
    0b0000010010001000010100000000000001010000100010000000010000000010'i64,
    0b0000100000010000101000000000000010100000000100000000100000000100'i64,
    0b0001000000100000010000000000000001000000001000000001000000001000'i64,
    0b0000010000000010000000000000001000000100000010000001000000100000'i64,
    0b0000100000000101000000000000010100001000000100000010000001000000'i64,
    0b0001000100001010000000000000101000010001001000000100000010000000'i64,
    0b0010001000010100000000000001010000100010010000011000000000000000'i64,
    0b0100010000101000000000000010100001000100100000100000000100000000'i64,
    0b1000100001010000000000000101000010001000000001000000001000000001'i64,
    0b0001000010100000000000001010000000010000000010000000010000000010'i64,
    0b0010000001000000000000000100000000100000000100000000100000000100'i64,
    0b0000001000000000000000100000010000001000000100000010000001000000'i64,
    0b0000010100000000000001010000100000010000001000000100000010000000'i64,
    0b0000101000000000000010100001000100100000010000001000000000000000'i64,
    0b0001010000000000000101000010001001000001100000000000000000000000'i64,
    0b0010100000000000001010000100010010000010000000010000000000000000'i64,
    0b0101000000000000010100001000100000000100000000100000000100000000'i64,
    0b1010000000000000101000000001000000001000000001000000001000000001'i64,
    0b0100000000000000010000000010000000010000000010000000010000000010'i64,
    0b0000000100000010000001000000100000010000001000000100000010000000'i64,
    0b0000000000000101000010000001000000100000010000001000000000000000'i64,
    0b0000000000001010000100010010000001000000100000000000000000000000'i64,
    0b0000000000010100001000100100000110000000000000000000000000000000'i64,
    0b0000000000101000010001001000001000000001000000000000000000000000'i64,
    0b0000000001010000100010000000010000000010000000010000000000000000'i64,
    0b0000000010100000000100000000100000000100000000100000000100000000'i64,
    0b0000000001000000001000000001000000001000000001000000001000000001'i64]

iterator bits*(e: int64): int =
  var mask = 1
  for i in 0 .. 63:
    yield int((e and mask) != 0)
    mask = mask shl 1

proc count*(e: int64): int =
  for b in bits(e):
    result += b

proc seq_array*(arr: var array[64, seq[int]]; e: int64; id: int) =
  var mask = 1
  for i in 0 .. 63:
    if int((e and mask) != 0) == 1: arr[id].add(i)
    mask = mask shl 1

proc fill_array*(arr: var array[64, int]; e: int64; fill: int) =
  var mask = 1
  for a in arr.mitems:
    if int((e and mask) != 0) == 1: a = fill
    mask = mask shl 1

proc coord*(p: int): string =
  var
    r = ROW(p)
    c = COL(p)
    a = c + 97
    b = r + 49
  result = chr(a) & chr(b)

proc row*(c: char): int =
  result = ord(c) - 49

proc col*(c: char): int =
  result = ord(c) - 97

method setup*(self: Longbow, players: seq[Player]) =
  self.default_setup(players)
  self.piece_char = piece_char
  self.color = init_color
  self.piece = init_piece
  self.pos = init_pos
  self.whites = init_white
  self.blacks = init_black
  self.pawns = init_pawn
  self.knights = init_knight
  self.bishops = init_bishop
  self.white_pawns = self.whites and self.pawns
  self.white_knights = self.whites and self.knights
  self.white_bishops = self.whites and self.bishops
  self.black_pawns = self.blacks and self.pawns
  self.black_knights = self.blacks and self.knights
  self.black_bishops = self.blacks and self.bishops

method get_possible_moves*(self: Longbow): array[64, seq[int]] =
  var valid_moves: int64
  for i in 0 .. 63:
    case self.color[i]:
      of WHITE:
        case self.piece[i]:
          of PAWN:
            valid_moves = wpm[i] and not self.pos
            valid_moves = valid_moves or (wpc[i] and self.blacks)
          of KNIGHT:
            valid_moves = kmc[i] and not self.whites
          of BISHOP:
            valid_moves = bmc[i] and self.blacks
          else: continue
      of BLACK:
        case self.piece[i]:
          of PAWN:
            valid_moves = bpm[i] and not self.pos
            valid_moves = valid_moves or (bpc[i] and self.whites)
          of KNIGHT:
            valid_moves = kmc[i] and not self.blacks
          of BISHOP:
            valid_moves = bmc[i] and self.whites
          else: continue
      else: continue
    result.seq_array(valid_moves, i)

method set_possible_moves*(self: Longbow, moves: var seq[string]) =
  var arr = self.get_possible_moves()
  for i in countdown(63, 0):
    if len(arr[i]) > 0 and self.color[i] == self.current_player_number:
      for j in arr[i]:
        moves.add(coord(i) & coord(j))

method make_move(self: Longbow, move: string): string =
  var
    a = move[0]
    b = move[1]
    A = move[2]
    B = move[3]
    c = col(a)
    r = row(b)
    C = col(A)
    R = row(B)
    p = 63 - (7-r)*8 - c
    q = 63 - (7-R)*8 - C
    P = one shl p
    Q = one shl q

  case self.color[p]:
    of WHITE:
      self.whites = self.whites xor P or Q
    of BLACK:
      self.blacks = self.blacks xor P or Q
    else: discard

  case self.color[q]:
    of WHITE:
      self.whites = self.whites xor Q
    of BLACK:
      self.blacks = self.blacks xor Q
    else: discard

  case self.piece[p]:
    of PAWN:
      self.pawns = self.pawns xor P or Q
      case self.piece[q]:
        of KNIGHT:
          self.knights = self.knights xor Q
        of BISHOP:
          self.bishops = self.bishops xor Q
        else: discard
    of KNIGHT:
      self.knights = self.knights xor P or Q
      case self.piece[q]:
        of PAWN:
          self.pawns = self.pawns xor Q
        of BISHOP:
          self.bishops = self.bishops xor Q
        else: discard
    of BISHOP:
      self.bishops = self.bishops xor P or Q
      case self.piece[q]:
        of PAWN:
          self.pawns = self.pawns xor Q
        of KNIGHT:
          self.knights = self.knights xor Q
        else: discard
    else: discard

  self.pos = self.pos xor P or Q

  self.white_pawns = self.whites and self.pawns
  self.white_knights = self.whites and self.knights
  self.white_bishops = self.whites and self.bishops
  self.black_pawns = self.blacks and self.pawns
  self.black_knights = self.blacks and self.knights
  self.black_bishops = self.blacks and self.bishops

  self.color[q] = self.color[p]
  self.color[p] = NONE
  self.piece[q] = self.piece[p]
  self.piece[p] = EMPTY

  result = "Captured pieces:"
  result.add("\n\twhite:")
  for i in 0 .. 7 - count(self.white_pawns):
    result.add(" P")
  for i in 0 .. 7 - count(self.white_knights):
    result.add(" N")
  for i in 0 .. 7 - count(self.white_bishops):
    result.add(" B")
  result.add("\n\tblack:")
  for i in 0 .. 7 - count(self.black_pawns):
    result.add(" p")
  for i in 0 .. 7 - count(self.black_knights):
    result.add(" n")
  for i in 0 .. 7 - count(self.black_bishops):
    result.add(" b")
  result.add("\n")

method determine_winner*(self: Longbow) =
  if self.winner_player_number > 0:
    return
  if (rank8 and self.white_pawns) > 0:
    self.winner_player_number = 1
  if (rank1 and self.black_pawns) > 0:
    self.winner_player_number = 2
  if count(self.pawns) == 0:
    self.winner_player_number = STALEMATE

method status*(self: Longbow): string =
  for i in countdown(63, 0):
    if (i + 1) mod 8 == 0:
      result.add("\n$1 " % $(ROW(i)+1))
    case self.color[i]:
      of NONE, WHITE:
        result.add(" $1" % $self.piece_char[self.piece[i]])
      of BLACK:
        result.add(" $1" % toLower($self.piece_char[self.piece[i]]))
      else: discard
  result.add("\n\n   a b c d e f g h\n")

method get_state*(self: Longbow): string =
  result = $self.current_player_number
  result.add(' ')
  result.add($self.whites)
  result.add(' ')
  result.add($self.blacks)
  result.add(' ')
  result.add($self.pawns)
  result.add(' ')
  result.add($self.knights)
  result.add(' ')
  result.add($self.bishops)

method restore_state*(self: Longbow, state: string) =
  var a = split(state)
  self.current_player_number = parseInt(a[0])
  self.whites = parseBiggestInt(a[1])
  self.blacks = parseBiggestInt(a[2])
  self.pawns = parseBiggestInt(a[3])
  self.knights = parseBiggestInt(a[4])
  self.bishops = parseBiggestInt(a[5])
  self.white_pawns = self.whites and self.pawns
  self.white_knights = self.whites and self.knights
  self.white_bishops = self.whites and self.bishops
  self.black_pawns = self.blacks and self.pawns
  self.black_knights = self.blacks and self.knights
  self.black_bishops = self.blacks and self.bishops
  self.color.fill_array(self.whites, WHITE)
  self.color.fill_array(self.blacks, BLACK)
  self.piece.fill_array(self.pawns, PAWN)
  self.piece.fill_array(self.knights, KNIGHT)
  self.piece.fill_array(self.bishops, BISHOP)

method scoring*(self: Longbow): float =
  # check for winner first
  var winner = 0
  if (rank8 and self.white_pawns) > 0:
    winner = 1
  if (rank1 and self.black_pawns) > 0:
    winner = 2
  if winner == self.current_player_number:
    return 10000.0
  if winner != 0:
    return -10000.0
  # check for relative strategic value
  var
    white_score = count(self.white_pawns) + 2*count(self.white_knights) + 3*count(self.white_bishops)
    black_score = count(self.black_pawns) + 2*count(self.black_knights) + 3*count(self.black_bishops)
  case self.current_player_number:
    of WHITE: return (white_score - black_score).float
    of BLACK: return (black_score - white_score).float
    else: discard

proc main(depth=5, black=false) =
  var game = Longbow()
  if not black:
    game.setup(@[
      Player(name: "White"),
      NegamaxPlayer(name: "Black", depth: depth)
    ])
  else:
    game.setup(@[
      NegamaxPlayer(name: "White", depth: depth),
      Player(name: "Black")
    ])
  var history: seq[string] = @[]
  history = play(game)
  echo "history: " & $history

when isMainModule:
  echo "\nLongbow v1.0.1"
  echo "A warband chess variant"
  echo "Copyright 2019 Andre Smit\n"
  dispatch(main)
